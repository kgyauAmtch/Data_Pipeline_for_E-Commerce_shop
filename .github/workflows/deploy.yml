name: Deploy Lambda and Push ECS Images

on:
  push:
    paths:
      - 'lambda/**'
      - 'scripts/**'
      - 'docker/**'
      - 'ecs/**'
      - 'requirements.txt'
      - '.github/workflows/deploy.yml'
    branches:
      - main

env:
  ECR_REPOSITORY: lab6/ecommerce-repo

jobs:
  deploy-lambda:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install AWS CLI
        run: |
          python -m pip install --upgrade pip
          pip install awscli

      - name: Package Lambda
        working-directory: lambda
        run: zip -r ../lambda.zip .

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Check if Lambda function exists
        id: check_lambda
        run: |
          set +e
          aws lambda get-function --function-name s3-validator
          echo "exists=$?" >> $GITHUB_OUTPUT
          set -e

      - name: Create Lambda function if not exists
        if: steps.check_lambda.outputs.exists != '0'
        run: |
          aws lambda create-function \
            --function-name s3-validator \
            --runtime python3.10 \
            --role arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/lab6-lambda \
            --handler s3_validation.lambda_handler \
            --zip-file fileb://lambda.zip \
            --timeout 30 \
            --memory-size 128

      - name: Update Lambda function code if exists
        if: steps.check_lambda.outputs.exists == '0'
        run: |
          aws lambda update-function-code \
            --function-name s3-validator \
            --zip-file fileb://lambda.zip

  build-and-push-ecr:
    runs-on: ubuntu-latest
    needs: deploy-lambda

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push validation Docker image
        run: |
          IMAGE_URI_VALIDATION="${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:validation"
          docker build -t $IMAGE_URI_VALIDATION -f docker/dockerfile.validation .
          docker push $IMAGE_URI_VALIDATION
          echo "IMAGE_URI_VALIDATION=$IMAGE_URI_VALIDATION" > image_uris.txt

      - name: Build and push transformation Docker image
        run: |
          IMAGE_URI_TRANSFORMATION="${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:transformation"
          docker build -t $IMAGE_URI_TRANSFORMATION -f docker/dockerfile.transformation .
          docker push $IMAGE_URI_TRANSFORMATION
          echo "IMAGE_URI_TRANSFORMATION=$IMAGE_URI_TRANSFORMATION" >> image_uris.txt

      - name: Upload image URIs as artifact
        uses: actions/upload-artifact@v4

        with:
          name: image-uris
          path: image_uris.txt

  register-ecs-tasks:
    runs-on: ubuntu-latest
    needs: build-and-push-ecr
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Download image URIs artifact
        uses: actions/download-artifact@v4

        with:
          name: image-uris

      - name: Load image URIs into environment
        run: |
          source image_uris.txt
          echo "IMAGE_URI_VALIDATION=$IMAGE_URI_VALIDATION" >> $GITHUB_ENV
          echo "IMAGE_URI_TRANSFORMATION=$IMAGE_URI_TRANSFORMATION" >> $GITHUB_ENV

      - name: Debug loaded image URIs
        run: |
          echo "Validation Image URI: $IMAGE_URI_VALIDATION"
          echo "Transformation Image URI: $IMAGE_URI_TRANSFORMATION"

      - name: Replace image URI in validation task definition
        run: |
          sed "s|\${IMAGE_URI_VALIDATION}|$IMAGE_URI_VALIDATION|g" ecs/ecs_taskdefinition_validation.json > temp-validation.json
          sed "s|<ACCOUNT_ID>|${{ secrets.AWS_ACCOUNT_ID }}|g" temp-validation.json > temp-validation-2.json
          sed "s|\${AWS_REGION}|${AWS_REGION}|g" temp-validation-2.json > rendered-task-def-validation.json

      - name: Replace image URI in transformation task definition
        run: |
          sed "s|\${IMAGE_URI_TRANSFORMATION}|$IMAGE_URI_TRANSFORMATION|g" ecs/ecs_taskdefinition_transformation.json > temp-transformation.json
          sed "s|<ACCOUNT_ID>|${{ secrets.AWS_ACCOUNT_ID }}|g" temp-transformation.json > temp-transformation-2.json
          sed "s|\${AWS_REGION}|${AWS_REGION}|g" temp-transformation-2.json > rendered-task-def-transformation.json

      - name: Register ECS task definition - Validation
        run: |
          aws ecs register-task-definition --cli-input-json file://rendered-task-def-validation.json

      - name: Register ECS task definition - Transformation
        run: |
          aws ecs register-task-definition --cli-input-json file://rendered-task-def-transformation.json
  deploy-stepfunction:
    runs-on: ubuntu-latest
    needs: register-ecs-tasks
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy Step Function
        run: |
          STATE_MACHINE_NAME="lab6-statemachine"
          ROLE_ARN="arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/StepFunctions-lab6-statemachine-role-p2e1crlfq"
          DEFINITION_FILE="stepfunction/stepfunction.json"

          # Check if state machine exists
          set +e
          aws stepfunctions describe-state-machine --state-machine-arn arn:aws:states:${{ secrets.AWS_REGION }}:${{ secrets.AWS_ACCOUNT_ID }}:stateMachine:$STATE_MACHINE_NAME
          EXISTS=$?
          set -e

          if [ $EXISTS -ne 0 ]; then
            echo "Creating Step Function state machine..."
            aws stepfunctions create-state-machine \
              --name "$STATE_MACHINE_NAME" \
              --role-arn "$ROLE_ARN" \
              --definition file://$DEFINITION_FILE
          else
            echo "Updating Step Function state machine..."
            aws stepfunctions update-state-machine \
              --state-machine-arn arn:aws:states:${{ secrets.AWS_REGION }}:${{ secrets.AWS_ACCOUNT_ID }}:stateMachine:$STATE_MACHINE_NAME \
              --definition file://$DEFINITION_FILE
          fi
