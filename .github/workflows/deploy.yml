name: Deploy Lambda and Push Docker to ECR

on:
  push:
    paths:
      - 'lambda/**'
      - 'scripts/**'
      - 'docker/**'
      - 'ecs/**'
      - 'requirements.txt'
      - '.github/workflows/deploy.yml'
    branches:
      - main

env:
  ECR_REPOSITORY: lab6/ecommerce-repo
  TASK_DEFINITION_NAME: ecommerce-task

jobs:
  deploy-lambda:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install AWS CLI
        run: |
          python -m pip install --upgrade pip
          pip install awscli

      - name: Package Lambda
        working-directory: lambda
        run: |
          zip -r ../lambda.zip .

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Check if Lambda function exists
        id: check_lambda
        run: |
          set +e
          aws lambda get-function --function-name s3-validator
          echo "exists=$?" >> $GITHUB_OUTPUT
          set -e

      - name: Create Lambda function if not exists
        if: steps.check_lambda.outputs.exists != '0'
        run: |
          aws lambda create-function \
            --function-name s3-validator \
            --runtime python3.10 \
            --role arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/lab6-lambda \
            --handler s3_validation.lambda_handler \
            --zip-file fileb://lambda.zip \
            --timeout 30 \
            --memory-size 128

      - name: Update Lambda function code if exists
        if: steps.check_lambda.outputs.exists == '0'
        run: |
          aws lambda update-function-code \
            --function-name s3-validator \
            --zip-file fileb://lambda.zip

  build-and-push-ecr:
    runs-on: ubuntu-latest
    needs: deploy-lambda
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image to ECR
        run: |
          IMAGE_URI="${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest"
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV
          docker build -t $IMAGE_URI -f docker/Dockerfile .
          docker push $IMAGE_URI

  register-ecs-task:
    runs-on: ubuntu-latest
    needs: build-and-push-ecr
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Replace image URI in task definition template
        run: |
          IMAGE_URI="${{ steps.build-and-push-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:ecommerce_image"
          sed "s|\${IMAGE_URI}|$IMAGE_URI|g" ecs/ecs_taskdefinition.json > rendered-task-def.json

      - name: Register ECS task definition
        run: |
          aws ecs register-task-definition --cli-input-json file://rendered-task-def.json
